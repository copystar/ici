// Generated by CoffeeScript 1.6.2
(function() {
  var articles, checkImages, display, drawMap, getImages, locate, map, markers, pageSize, refreshRate, seenPosition,
    _this = this;

  map = null;

  markers = {};

  seenPosition = {};

  pageSize = 100;

  refreshRate = 60 * 1000;

  jQuery(function() {
    var $;

    $ = jQuery;
    if ($.bbq.getState('lat') && $.bbq.getState('lon')) {
      return display();
    } else {
      return locate();
    }
  });

  locate = function() {
    if (Modernizr.geolocation) {
      return navigator.geolocation.getCurrentPosition(function(pos) {
        var lat, lon;

        lat = parseInt(pos.coords.latitude * 10000) / 10000;
        lon = parseInt(pos.coords.longitude * 10000) / 10000;
        $.bbq.pushState({
          lat: lat,
          lon: lon
        });
        display();
        return navigator.geolocation.getCurrentPosition = function(cb) {
          lat -= .01;
          return cb({
            coords: {
              latitude: lat,
              longitude: lon
            }
          });
        };
      });
    }
  };

  display = function() {
    var lat, lon, url;

    lat = $.bbq.getState('lat');
    lon = $.bbq.getState('lon');
    if (seenPosition["" + lat + ":" + lon]) {
      return;
    }
    seenPosition["" + lat + ":" + lon] = true;
    url = ("http://api.geonames.org/findNearbyWikipediaJSON?lat=" + lat + "&lng=" + lon + "&radius=30&username=wikimedia&maxRows=") + pageSize;
    console.log(url);
    $.ajax({
      url: url,
      dataType: "jsonp",
      success: articles
    });
    return drawMap(lat, lon);
  };

  articles = function(geo) {
    var article, marker, url, _i, _len, _ref;

    _ref = geo.geonames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      article = _ref[_i];
      url = "http://" + article.wikipediaUrl;
      if (markers[article.title]) {
        continue;
      }
      marker = L.marker([article.lat, article.lng], {
        title: article.title,
        icon: L.AwesomeMarkers.icon({
          icon: 'book',
          color: 'blue'
        })
      });
      marker.addTo(map);
      marker.bindPopup("<div class='summary'><a target='_new' href='" + url + "'>" + article.title + "</a> - " + article.summary + "</div>");
      markers[article.title] = marker;
    }
    return checkImages();
  };

  checkImages = function() {
    var marker, title, _results;

    _results = [];
    for (title in markers) {
      marker = markers[title];
      if (marker.checked === true) {
        continue;
      }
      marker.checked = true;
      _results.push(getImages(title, function(title, images) {
        var red;

        if (images.length === 0) {
          console.log(title, images);
          marker = markers[title];
          red = L.AwesomeMarkers.icon({
            icon: 'icon-camera-retro',
            color: 'red'
          });
          marker.setIcon(red);
          return marker.update();
        }
      }));
    }
    return _results;
  };

  getImages = function(title, callback) {
    var url;

    url = "http://en.wikipedia.org/w/api.php?action=query&prop=images&format=json&titles=" + title + "&callback=?&imlimit=500";
    return $.getJSON(url, function(data) {
      var images, page, pageId, _ref;

      images = [];
      _ref = data.query.pages;
      for (pageId in _ref) {
        page = _ref[pageId];
        if (page.images != null) {
          images = page.images;
        }
        break;
      }
      return callback(title, images);
    });
  };

  drawMap = function(lat, lon) {
    var layer;

    if (!map) {
      map = L.map('map').setView([lat, lon], 14);
      layer = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 22
      });
      layer.addTo(map);
      return map.on('dragend', function(e) {
        var center;

        center = map.getCenter();
        console.log(center);
        $.bbq.pushState({
          lat: center.lat,
          lon: center.lng
        });
        return display();
      });
    } else {
      console.log("moving to " + lat + " " + lon);
      map.setView([lat, lon], 14);
      return display();
    }
  };

}).call(this);
